@using Core
@using GeneratorWeb.Service
@inject Generator Generator
@inject ConvertManager ConvertManager
@inject IJSRuntime JSRuntime

<div class="card-body">
    <div class="d-flex justify-content-around">
        <button class="btn btn-outline-warning" @onclick="@(async() => await DownloadFile("xlsx"))">
            Export Excel
        </button>
        <button class="btn btn-outline-warning" @onclick="@(async() => await DownloadFile("csv"))">
            Export CSV
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            @if (DataList != null)
            {
                <thead>
                    <tr class="align-content-center">
                        @foreach (var field in DataList)
                        {
                            <th>@field.FieldName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var list in GeneratedData)
                    {
                        <tr>
                            @foreach (var data in list)
                            {
                                <td>@data.ToString()</td>
                            }
                        </tr>
                }
                </tbody>
            }
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string Locale { get; set; }

    [Parameter]
    public int DataCount { get; set; }

    [Parameter]
    public List<Data> DataList { get; set; }

    private List<List<object>> GeneratedData { get; set; }
    private ExportService ExportService {get;set;}

    protected override void OnParametersSet()
    {
        GeneratedData = new List<List<object>>();
        Generate();
    }

    protected override void OnInitialized()
    {
        GeneratedData = new List<List<object>>();
        ExportService = new ExportService();
    }

    public void Generate()
    {
        if (DataList == null)
            return;

        GeneratedData = ConvertManager.Generate(DataList, DataCount, Locale);
    }

    protected async Task DownloadFile(string type)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Do you want to Export?"))
        {
            byte[] fileBytes = new byte[0];

            switch (type)
            {
                case "csv" :
                    fileBytes = ExportService.CreateFullExportCSV(DataList, GeneratedData);
                    break;
                case "xlsx" :
                    fileBytes = ExportService.CreateFullExportExcel(DataList, GeneratedData);
                    break;
            }
            var fileName = $"Export.{type}";
            await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        }
    }
}
